SCRATCH

--

Form

Terminology:

	field:
		a form field

	field definition:
		array with flags that define the field (name, label, rendering etc.)

	(definition) flag:
		a single named flag used to define a property of the field ('name', 'label' etc.)
		

rendering:
	1. explicit set by flag 'renderer'
	2. shorthand renderer set by flag 'render_as' -> $this->render_<render_as>
	   (if $this->render_field_<field_name>() is not set).
	3. $this->render_<field_name>()
	4. none of above found: no rendering at all

--

Attr_controllable

$m->foo = 'hej'
a) prop. set, overwrite (default)
b) not set, set $m->foo (__set)

$m->foo
a) prop. exists, return (default)
c) none of above, return null ?? (__get)

$m->foo()
a) foo() exists, call (default)
b) $m->foo exists. return call or $m->foo (__call)
c) none of above, return null ?? (__call)

$m->foo('hej')
a) foo() exists, call (default)
b) $m->foo exists, set $m->foo = 'hej' (__call)

$m->act_as_map( 'foo' )
a) $m->foo exists, add array access ($m->_map['foo'] = true)

$m->foo(0)
a) $m->foo[0] exists, return
b) return null 

$m->foo(0, 'nej')
a) $m->foo exists, $m->foo[0] = 'hej'
b) return null

--

Form

<field_name>:
	field_name (field_name): field name (copy of key) (autoset)

	name (Field_name): readable name

	label (name): readable label
	id (field_name): html id
	help_msg (''): help message

	add_default_def (false): fill w/ default def. if exists, for 'submit' etc.

	values (array/callback, null): valid values, if applicable, array or callback. used for selects etc.
	value (mixed, null): value to use for field (for hiddens)
	default (mixed/callback, null): default data

	renderer (string (template filename) or callback)

Validatable:
	type
	add_default_validators
	required 
	validators (array)
	errmsg
	errmsg_*

validator callbacks:
	call:
		<validator>( $self, $field, $val ) where $field is field definition (as above)

renderer callbacks:
	call:
		<renderer>( $self, $field, $val ) where $field is field definition (as above)

<fieldset name>:
	fieldset_name (fieldset_name) [fieldset name]
	title (fieldset_name) [fieldset title]
	fields (array) [field names]

properties:
	action (string, ''): action
	method (string, 'get'): method
	enctype (string, 'utf-8'): encoding
	accept_charset (string, n''): accept-charset

methods:
	fields() -> field definition
	fields_order() -> field order (defaults to field definition order)
	fieldsets() -> fieldsets (defaults to none)
	fieldsets_order() -> fieldsets order (defaults to fieldset definition order)
	default_field() -> array m. default field specs

	field( $field, $key = null ): -> field definition 
	has_field( $field ): -> t/f
	source( & $source ): sets source (array) for field values

	__construct(): sets upp field specs

	_init_field( $field_name ): 
	_renderer($field): -> renderer for field

	render(): renders form
	render_<type>( $form, $field, $val ): default renderer for <type>
	render_field( $field ): renders given field


_init_field( $field_name ) sätter default-värden på fält.
default_<field name> -> default-värden för fält med namn <field name>

renderer:
	'textarea' -> $this->render_textarea()
	'this:custom' -> $this->custom()
	callback -> callback()

hur ange renderare? och hur lista ut vilken som ska användas i _renderer() ??
	
--

Validatable: object w/ validators

<attr name>:
	add_def_validators (bool, true): add default (empty+type) validators
	type (string, 'string'): type (string|email|url|int|num|bool)
	required (bool, false): required or not
	min (int, null): minimum value for int or string length
	max (int, null): maximum ^^
	regexp (string, null): validate syntax
	errmsg (string, '%(attr_name) is not valid.'): default error message
	errmsg_<validator> (string, ^^): error message for <validator>
		errmsg_empty (string, '%(attr_name) must not be empty.'): default error msg for empty vals
	validators (array): all validators to run. if add_def_validators, default will be added

default rules:
	if regexp: add regexp validator to validators ('regexp')
	if add_def_validators: add empty + type validators ('required' + 'type')

validating:
	run validators in order

validator: callable that throws Validation_error on fail
	values:
		a) valid callback (closure or callback)
		b) this:<method name>
	call:
		<validator>( $this, $attr, $val ): $attr is <attr name> as above

errmsg: string or callable that returns an error message

methods:
	validate( $attr_name ): validates $attr_name, throws Validation_error on fail
	is_valid( $attr_name ): runs validate + catches exception (returns true/false)

	attrdef( $attr_name, $attrdef = null ): sets/gets attr def.

	errors( $errs = '' ): get/set errors
	add_errors( $errors ): adds errors (simple array merge)

	validators( $attr_name, $vs = null ): sets/gets validators for $attr_name
	add_validator( $attr_name, $validator, $validator_name = null ): adds validator, optionally named
	del_validator( $attr_name, $validator_name ): deletes named validator

	helpers:
		_init_attrdef( $attr_name ): sätter defaults etc. på $attr_name, flaggar att körts med $attr['_inited'] = true
		_errmsg( $attr_name, $validator_name ): returns error message, falls back if not found
		_validators( $attr_name ): returns validators for $attr_name (adds default etc.)

	customizing:
		validator_<validator_name>: validator for <validator_name>
			validator_regexp( $self, $attr_name, $value ) : validates regexp
			validator_empty( $self, $attr_name, $value ): validates not empty
			validator_<type>( $self, $attr_name, $value ): validate type
		errmsg_<validator_name>: error message for <validator_name>
			
		validate_<attr_name>: used for validating <attr_name>
		errmsg_for_<attr_name>: error message for <attr_name>


både validator och errmsg kan vara callbacks, enl. samma princip.
vid validering:
	kör varje validator. (t.ex. _validate_string, _validate_empty)

runtime vs. initiera rätt och kör rakt av on runtime
RUNTIME

validators:
	1. validate_<attr_name>
	2. validate_regexp
	3. validate_empty
	4. validate_<type>

_errmsg( $attr_name, $validator_name ):
	1. errmsg_for_<attr_name>()
	2. errmsg_<validator_name>()
	3. def: errmsg_<validator_name>
	4. def: errmsg

errmsg( $attr, $validator_name = null ): returnerar felmeddelande


--

XSRF guard

type 'xsrf_guard'
-> validerar med self::$default_xsrf_guard

Form::$default_xsrf_guard_enable = true;
Form::$default_xsrf_guard = new Xsrf_guard(); # set timeout, secret etc. here
Form::$default_xsrf_guard_field_name = '__xsrf_guard';

props:
	xsrf_guard_enable
	xsrf_guard
	xsrf_field_name

i __construct:
	sätt xsrf_guard_enable
	sätt xsrf_guard (anv. $this->default_xsrf_guard() om $def.. ej satt)
	sätt xsrf_field_name

$form->xsrf_guard( $xsrf_guard );
$form->xsrf_guard_enable( true );
$form->xsrf_field_name( 'xsrf_field' );

$form->default_xsrf_guard()
	skapa ny Xsrf_guard med default-värden och returnera

måste initieras när:

	* render
	* validate

genom att köra:

_init_xsrf_field()
	om xsrf_guard_enable, skapa fält:
		$this->xsrf_field_name() => array(
			'type' => 'xsrf_guard',
			'add_def_validators' => false,
			'render_as' => 'xsrf_guard',
		)

validator_xsrf_guard()
	hämta xsrf-guard ($this->xsrf_guard())
	$token = $val
	return $xsrf_guard->validate( $token )

render_xsrf_guard()
	hämta xsrf-guard ($this->xsrf_guard())
	val: $xsrf_guard->token()
	rendera som hidden med $this->xsrf_field_name()

måste överlagra validate för initiering av xsrf-fält:
validate( $attr_name = null )
	_init_xsrf_field();
	return parent::validate( $attr_name )

alternativ:
	rendera inte xsrf separat utan låt form-wrapper sätta dit. inte lika snyggt, dock.
	logiskt sett borde det vara ett fält hos formuläret, som vilket annat hidden-fält som
	helst. problemet är eg. rendering av hiddens så att de inte stör layout (first/last).

--

hur se till att hiddens inte stör rendering?

använd is_first() & is_last() för att kolla om fält är först/sist:

is_hidden( $field_name )
	$field =& $this->_check_exists( $field_name );
	return $field['render_as'] == 'hidden';

is_first( $field_name, $field_order )
	while ( list( $key, $name ) = each( $field_order ) )
		if ( !$this->is_hidden( $name ) )
			break;
	return current( $field_order ) == $field_name;

is_last( $field_name, $field_order )
	return is_first( $field_name, array_reverse( $field_order ) )
